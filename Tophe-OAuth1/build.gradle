apply plugin: 'com.android.library'

dependencies {
    def artifactTophe = 'co.tophe:tophe:1.0.0'

    def localTophe = ':Tophe'

    def useLocalTophe = true

    allprojects {
        rootProject.allprojects.project.each {
            if (it.path == localTophe) {
                useLocalTophe = true
            }
        }
    }

//    if (useLocalTophe) {
  //      println 'Using local Tophe library in ' + project.path
    //    compile project(localTophe)
    //} else {
    //    compile artifactTophe
    //}
    compile artifactTophe

    compile 'oauth.signpost:signpost-core:1.2.1.2'
}

android {
    compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION)
    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION

    defaultConfig {
        minSdkVersion Math.max(9, Integer.parseInt(ANDROID_BUILD_MIN_SDK_VERSION))
        targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
        versionCode Integer.parseInt(project.VERSION_CODE)
        versionName project.VERSION_NAME
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        androidTest {
            manifest.srcFile 'tests/AndroidManifest.xml'
            java.srcDirs = ['tests/src']
        }
    }

    buildTypes {
        release {
            proguardFiles getDefaultProguardFile('proguard-project.txt'), 'proguard-rules.txt'
        }
    }

    libraryVariants.all { variant ->
        def name = variant.buildType.name
        if (name.equals(com.android.builder.core.BuilderConstants.DEBUG)) {
            return; // Skip debug builds.
        }
        def task = project.tasks.create "jar${name.capitalize()}", Jar
        task.dependsOn variant.javaCompile
        task.from variant.javaCompile.destinationDir
        artifacts.add('archives', task);

        configurations.archives.artifacts.with { archives ->
            def aarArtifact
            archives.each {
                if (it.file =~ 'aar') {
                    aarArtifact = it
                }
            }
            //println "AAR to delete: ${aarArtifact}"
            remove(aarArtifact)
        }
    }
}


apply from: 'https://raw.githubusercontent.com/mcxiaoke/gradle-mvn-push/master/gradle-mvn-push.gradle'
